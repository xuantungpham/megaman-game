package com.nhom10.gameobject;

import com.thach.effect.Animation;
import com.thach.effect.CacheDataLoader;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.applet.AudioClip;

public class RedEyeDevil extends ParticularObject{
    private Animatino forwardAnim, backAnim;           // chiều đứng của quái
    
    private long starTimeToShoot;                      //thời gian bắn của quái
    
//    private AudioClip shooting;
    
    public RedEyeDevil(float x, float y, GameWorld gameWorld){    //quái
        super(x, y, 127, 89, 0, 100, gameWorld);
        backAnim = CacheDataLoader.getInstance().getAnimatin("redeye");
        forwardAnim = CacheDataLoader.getInstance().getAnimatin("redeye");
        forwardAnim.flipAllImage();
        starTimeToShoot = 0;
        setDamage(10);
        setTimeForNoBehurt(300000000);
    //    shooting = CacheDataLoader.getInstance().getSound("redeyeshooting");
    }
    
    @Override
    public void attack{
//        shooting.play();
        Bullet bullet = new RedEyeBullet(getPosX(), getPosY(), getGameWorld());
        if(getDirection() == LEFT_DIR) bullet.setSpeedX(-8);
        else bullet.setSpeedX(8);
        bullet.setTeamType(getTeamType());
        getGameWorld().bulletManager.addObject(bullet);
    }
    
    public void Update(){
        super.Update();
        if(System.nanoTime() - startTimeToShoot > 1000*10000000){    //nanotime = 1 giây
            attack();
            System.out.println("Red Eye attack");
            startTimeToShoot = System.nanoTime();
        }
    }
    
    @Override
    public Rectangle getBoundForCollisionWithEnemy(){
        Rectangle rect = getBoundForCollisionWithMap();
        rect.x +=20;
        rect.width -=40;
        return rect;
    }
    
    @Override
    public void draw(Graphics2D g2){
        if(!isObjectOutOfCameraView()){
            if(getState() == NOBEHURT && (System.nanoTime()/10000000)%2!=1){
                
            }else{
                if(getDirection() == LEFT_DIR){
                    backAnim.Update(System.nanoTime());
                    backAnim.draw((int) (getPosX() - getGameWorld().camera.getPosX()),
                            (int) (getPosY() - getGameWorld().camera.getPosY()), g2);
                }else{
                    forwardAnim.Update(System.nanoTime());
                    forwardAnim.draw((int) (getPosX() - getGameWorld().camera.getPosX()),
                            (int) (getPosY() - getGameWorld().camera.getPosY()), g2);
                }
            }
        }
    }
}
